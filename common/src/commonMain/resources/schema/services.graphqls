schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

type Query {
    findAllServices(pagination: PaginationInput): [ServiceType]!

    findAllServicesByHost(host: String!): [ServiceType]!
    findAllServicesByTopic(topic: String!): [ServiceType]!

    findAllServicesSortedByTopic: [TopicGroup]!

    findServiceById(id: ID!): ServiceType
}

type Mutation {
    registerService(service: ServiceInput!): ServiceType!
    removeService(id: ID!): Boolean
    updateTTL(id: ID!): Boolean
}

type Subscription {

    listenTo(event: [ServiceEventType!]!): ServiceType!

}

input PaginationInput {
    page: Int!
    pageSize: Int!
}

type ServiceType {
    id: ID!
    network: NetworkType!
    topic: String!
#    metadata(keys: [String!] = []): Dict! TODO
}

input ServiceInput {
    network: NetworkInput!
    topic: String!
#    metadata: String TODO
}

type NetworkType {
    host: String!
    port: Int!
}

input NetworkInput {
    host: String!
    port: Int!
}

type TopicGroup {
    topic: String!
    services: [ServiceType!]!
}

type ServiceEvent {
    type: ServiceEventType!
    service: ServiceType!
}

enum ServiceEventType {
    REGISTRATION REMOVAL UPDATE
}

scalar Dict